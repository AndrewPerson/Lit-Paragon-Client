import { Missing } from "../../missing";
import { DailyTimetable } from "./types";
import { Timetable, Day } from "../timetable/types";
import { BellToDate, GetSchoolDayCount } from "./daily-timetable-utils";
import { bells } from "./bells";

export async function generateDailyTimetable(currentDailyTimetable: DailyTimetable, timetable: Timetable): Promise<DailyTimetable | null> {
    if (currentDailyTimetable.date === undefined || currentDailyTimetable.date === null)
        return null;

    if (currentDailyTimetable.timetable?.timetable?.dayNumber === undefined || currentDailyTimetable.timetable?.timetable?.dayNumber === null)
        return null;

    if (currentDailyTimetable.bells === undefined || currentDailyTimetable.bells === null)
        return null;

    let currentDailyTimetableDate = new Date(currentDailyTimetable.date);
    let lastBell = currentDailyTimetable.bells[currentDailyTimetable.bells.length - 1];

    let now = new Date();

    while (now.getTime() > BellToDate(lastBell, currentDailyTimetableDate).getTime()) {
        let adjustedNow = new Date(now);

        if (adjustedNow.getFullYear() == currentDailyTimetableDate.getFullYear() &&
            adjustedNow.getMonth() == currentDailyTimetableDate.getMonth() &&
            adjustedNow.getDate() == currentDailyTimetableDate.getDate())
            adjustedNow.setDate(adjustedNow.getDate() + 1);

        if (adjustedNow.getDay() == 6)
            adjustedNow.setDate(adjustedNow.getDate() + 1);

        if (adjustedNow.getDay() == 0)
            adjustedNow.setDate(adjustedNow.getDate() + 1);

        //YYYY-MM-DD
        let date = `${adjustedNow.getFullYear().toString().padStart(2, "0")}-${(adjustedNow.getMonth() + 1).toString().padStart(2, "0")}-${adjustedNow.getDate().toString().padStart(2, "0")}`

        //Day number (1 - 15)
        let dayNumber: number = (parseInt(currentDailyTimetable.timetable!.timetable.dayNumber) + GetSchoolDayCount(currentDailyTimetableDate, adjustedNow) - 1) % 15 + 1;

        let newBells = bells[dayNumber - 1];
        if (newBells === undefined)
            //Keep updatingData true so we don't keep trying
            return null;

        let day: Day | Missing = timetable.days?.[dayNumber.toString()];
        if (day === null || day === undefined)
            //Keep updatingData true so we don't keep trying
            return null;

        if (day.dayNumber === null || day.dayNumber === undefined)
            //Keep updatingData true so we don't keep trying
            return null;

        currentDailyTimetable = {
            date: date,
            bells: newBells,
            timetable: {
                timetable: day,
                subjects: Object.fromEntries(timetable.subjects?.map(subject => {
                    return [`${subject?.year}${subject?.shortTitle}`, subject];
                }) ?? [])
            },
            roomVariations: [],
            classVariations: [],
            autoGenerated: true
        }

        currentDailyTimetableDate = new Date(adjustedNow);
        lastBell = newBells[newBells.length - 1];
    }

    return currentDailyTimetable;
}